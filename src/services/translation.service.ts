import axios from 'axios';
import { Ollama } from 'ollama';

export interface TranslationSegment {
  start: number;
  end: number;
  originalText: string;
  translatedText?: string;
}

export interface TranslationResult {
  success: boolean;
  message: string;
  segments?: TranslationSegment[];
}

export interface TranslationOptions {
  targetLanguage: string;
  sourceLanguage?: string;
  model?: string;
}

export class TranslationService {
  private ollama: Ollama;
  
  constructor() {
    // Configurar Ollama para o servidor correto
    this.ollama = new Ollama({ 
      host: process.env.OLLAMA_HOST || 'http://caucaia.saudehd.com.br:11434' 
    });
  }

  private readonly supportedModels = {
    'llama3.1:8b': {
      name: 'Llama 3.1 8B',
      description: 'Modelo r√°pido e eficiente para tradu√ß√µes gerais',
      temperature: 0.3,
      top_p: 0.9
    },
    'llama3.1:70b': {
      name: 'Llama 3.1 70B',
      description: 'Modelo mais poderoso para tradu√ß√µes complexas',
      temperature: 0.2,
      top_p: 0.8
    },
    'llama3.2:3b': {
      name: 'Llama 3.2 3B',
      description: 'Modelo compacto e r√°pido',
      temperature: 0.4,
      top_p: 0.9
    },
    'qwen2.5:7b': {
      name: 'Qwen 2.5 7B',
      description: 'Modelo Qwen especializado em m√∫ltiplas linguagens',
      temperature: 0.3,
      top_p: 0.9
    }
  };
  
  /**
   * Simula transcri√ß√£o de √°udio usando Whisper
   * Em produ√ß√£o, integraria com OpenAI Whisper ou similar
   */
  async transcribeAudio(audioPath: string, sourceLanguage: string = 'auto'): Promise<TranslationSegment[]> {
    console.log(`üéôÔ∏è Simulando transcri√ß√£o de √°udio: ${audioPath} (idioma: ${sourceLanguage})`);
    
    // TODO: Integrar com Whisper real
    // const whisperResult = await openai.audio.transcriptions.create({
    //   file: fs.createReadStream(audioPath),
    //   model: "whisper-1",
    //   response_format: "verbose_json",
    //   timestamp_granularities: ["segment"]
    // });

    try {
      const fs = require('fs');
      
      // Verificar se o arquivo de √°udio existe
      if (!fs.existsSync(audioPath)) {
        throw new Error(`Arquivo de √°udio n√£o encontrado: ${audioPath}`);
      }

      // Calcular dura√ß√£o estimada baseada no tamanho do arquivo (aproxima√ß√£o)
      const stats = fs.statSync(audioPath);
      const fileSizeKB = stats.size / 1024;
      const estimatedDuration = Math.max(9, Math.min(60, Math.round(fileSizeKB / 256))); // Estimativa baseada no tamanho
      
      console.log(`üìä Arquivo de √°udio: ${fileSizeKB.toFixed(2)} KB, dura√ß√£o estimada: ${estimatedDuration}s`);
      
      // Gerar segmentos baseados na dura√ß√£o estimada
      const segmentDuration = 3; // 3 segundos por segmento
      const numSegments = Math.ceil(estimatedDuration / segmentDuration);
      
      const mockSegments: TranslationSegment[] = [];
      
      for (let i = 0; i < numSegments; i++) {
        const start = i * segmentDuration;
        const end = Math.min((i + 1) * segmentDuration, estimatedDuration);
        
        // Textos mock mais variados
        const mockTexts = [
          "Hello, this is a sample transcription from the audio",
          "This is the second part of the audio content",
          "Here we continue with more audio transcription",
          "This segment contains more spoken content",
          "The audio continues with additional information",
          "This is another part of the transcribed audio",
          "More content is being transcribed from the audio",
          "The transcription continues with this segment",
          "Additional audio content is transcribed here",
          "This is the final part of the audio transcription"
        ];
        
        mockSegments.push({
          start,
          end,
          originalText: mockTexts[i % mockTexts.length] || `Audio segment ${i + 1} transcribed content`
        });
      }

      console.log(`üìù Mock transcription: ${mockSegments.length} segmentos gerados (${estimatedDuration}s total)`);
      return mockSegments;
      
    } catch (error: any) {
      console.error('‚ùå Erro na transcri√ß√£o simulada:', error);
      
      // Fallback para segmentos padr√£o
      const fallbackSegments: TranslationSegment[] = [
        { start: 0, end: 3, originalText: "Sample transcription from uploaded audio" },
        { start: 3, end: 6, originalText: "This is the second part of the audio" },
        { start: 6, end: 9, originalText: "Final segment of the transcribed content" }
      ];
      
      console.log(`‚ö†Ô∏è Usando segmentos fallback: ${fallbackSegments.length} itens`);
      return fallbackSegments;
    }
  }

  /**
   * Traduz texto usando servi√ßo de tradu√ß√£o
   * Implementa m√∫ltiplas op√ß√µes de tradu√ß√£o
   */
  async translateSegments(
    segments: TranslationSegment[], 
    targetLanguage: string,
    sourceLanguage: string = 'auto'
  ): Promise<TranslationResult> {
    try {
      console.log(`üåç Traduzindo ${segments.length} segmentos para ${targetLanguage}`);

      const translatedSegments: TranslationSegment[] = [];

      for (const segment of segments) {
        const translatedText = await this.translateText(
          segment.originalText, 
          sourceLanguage, 
          targetLanguage
        );

        translatedSegments.push({
          ...segment,
          translatedText
        });
      }

      return {
        success: true,
        message: `Tradu√ß√£o conclu√≠da para ${targetLanguage}`,
        segments: translatedSegments
      };

    } catch (error: any) {
      console.error('‚ùå Erro na tradu√ß√£o:', error);
      return {
        success: false,
        message: `Erro na tradu√ß√£o: ${error.message}`
      };
    }
  }

  /**
   * Traduz um texto individual
   * Usa m√∫ltiplas estrat√©gias de tradu√ß√£o: Ollama -> Google -> Dicion√°rio
   */
  async translateText(
    text: string, 
    targetLanguage: string,
    sourceLanguage: string = 'auto',
    model: string = 'llama3.1:8b'
  ): Promise<string> {
    
    // Estrat√©gia 1: Tentar Ollama (modelo local de IA)
    try {
      const translation = await this.translateWithOllama(text, sourceLanguage, targetLanguage, model);
      if (translation) {
        return translation;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Ollama falhou, tentando Google Translate');
    }
    
    // Estrat√©gia 2: Tentar Google Translate (gratuito via API n√£o oficial)
    try {
      const translation = await this.translateWithGoogle(text, sourceLanguage, targetLanguage);
      if (translation) {
        return translation;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Google Translate falhou, usando dicion√°rio local');
    }

    // Estrat√©gia 3: Tradu√ß√£o baseada em dicion√°rio simples
    return this.translateWithDictionary(text, targetLanguage);
  }

  /**
   * Tradu√ß√£o usando Ollama (modelo local de IA)
   */
  private async translateWithOllama(
    text: string,
    sourceLanguage: string,
    targetLanguage: string,
    model: string = 'llama3.1:8b'
  ): Promise<string | null> {
    try {
      if (!text || text.trim() === '') {
        return '';
      }

      const sourceLang = this.getLanguageName(sourceLanguage);
      const targetLang = this.getLanguageName(targetLanguage);
      const modelConfig = this.supportedModels[model as keyof typeof this.supportedModels];

      console.log(`ü§ñ Traduzindo com Ollama: ${sourceLang} -> ${targetLang} (${model})`);

      const prompt = `You are a professional translator. Translate the following text from ${sourceLang} to ${targetLang}.

IMPORTANT INSTRUCTIONS:
- Only return the translated text, nothing else
- Maintain the original formatting and punctuation
- Keep technical terms when appropriate
- Preserve proper nouns unless they have standard translations
- Ensure natural and fluent translation in the target language
- Do not add explanations or comments

Text to translate:
"${text}"`;

      const response = await this.ollama.generate({
        model,
        prompt,
        stream: false,
        options: {
          temperature: modelConfig?.temperature || 0.3,
          top_p: modelConfig?.top_p || 0.9,
          num_predict: -1
        }
      });

      const translatedText = response.response.trim();
      
      if (translatedText && translatedText !== text) {
        console.log(`‚úÖ Ollama traduziu: "${text}" -> "${translatedText}"`);
        return translatedText;
      }

      return null;

    } catch (error: any) {
      console.error('‚ùå Erro na tradu√ß√£o com Ollama:', error);
      
      // Se for erro de conex√£o, √© poss√≠vel que o Ollama n√£o esteja rodando
      if (error.code === 'ECONNREFUSED' || error.message?.includes('connect')) {
        console.warn('‚ö†Ô∏è Ollama n√£o est√° acess√≠vel. Verifique se est√° rodando.');
      }
      
      return null;
    }
  }

  /**
   * Converte c√≥digo de idioma para nome completo
   */
  private getLanguageName(languageCode: string): string {
    const languages: Record<string, string> = {
      'pt': 'Portuguese',
      'en': 'English',
      'es': 'Spanish',
      'fr': 'French',
      'de': 'German',
      'it': 'Italian',
      'ja': 'Japanese',
      'ko': 'Korean',
      'zh': 'Chinese',
      'ru': 'Russian',
      'ar': 'Arabic',
      'hi': 'Hindi',
      'auto': 'Portuguese' // fallback padr√£o
    };

    return languages[languageCode] || 'Portuguese';
  }

  /**
   * Tradu√ß√£o usando Google Translate (API n√£o oficial)
   */
  private async translateWithGoogle(
    text: string, 
    sourceLanguage: string, 
    targetLanguage: string
  ): Promise<string | null> {
    try {
      // Usando API p√∫blica do Google Translate
      const url = 'https://translate.googleapis.com/translate_a/single';
      const params = {
        client: 'gtx',
        sl: sourceLanguage === 'auto' ? 'en' : sourceLanguage,
        tl: targetLanguage,
        dt: 't',
        q: text
      };

      const response = await axios.get(url, { 
        params, 
        timeout: 5000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; TranslationBot/1.0)'
        }
      });

      if (response.data && response.data[0] && response.data[0][0]) {
        const translatedText = response.data[0][0][0];
        console.log(`‚úÖ Google Translate: "${text}" -> "${translatedText}"`);
        return translatedText;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Erro no Google Translate:', error);
      return null;
    }
  }

  /**
   * Tradu√ß√£o usando dicion√°rio b√°sico (fallback)
   */
  private translateWithDictionary(text: string, targetLanguage: string): string {
    console.log(`üìö Usando tradu√ß√£o por dicion√°rio para: ${targetLanguage}`);

    const translations: { [key: string]: { [key: string]: string } } = {
      'pt': {
        'hello': 'ol√°',
        'this': 'este',
        'is': '√©',
        'a': 'um',
        'sample': 'exemplo',
        'transcription': 'transcri√ß√£o',
        'second': 'segunda',
        'part': 'parte',
        'audio': '√°udio',
        'final': 'final',
        'segment': 'segmento',
        'thank': 'obrigado',
        'you': 'voc√™',
        'for': 'por',
        'listening': 'ouvir',
        'and': 'e',
        'of': 'de',
        'the': 'o'
      },
      'es': {
        'hello': 'hola',
        'this': 'este',
        'is': 'es',
        'a': 'un',
        'sample': 'ejemplo',
        'transcription': 'transcripci√≥n',
        'second': 'segunda',
        'part': 'parte',
        'audio': 'audio',
        'final': 'final',
        'segment': 'segmento',
        'thank': 'gracias',
        'you': 't√∫',
        'for': 'por',
        'listening': 'escuchar',
        'and': 'y',
        'of': 'de',
        'the': 'el'
      },
      'fr': {
        'hello': 'bonjour',
        'this': 'ce',
        'is': 'est',
        'a': 'un',
        'sample': 'exemple',
        'transcription': 'transcription',
        'second': 'deuxi√®me',
        'part': 'partie',
        'audio': 'audio',
        'final': 'final',
        'segment': 'segment',
        'thank': 'merci',
        'you': 'vous',
        'for': 'pour',
        'listening': '√©couter',
        'and': 'et',
        'of': 'de',
        'the': 'le'
      }
    };

    const dictionary = translations[targetLanguage];
    if (!dictionary) {
      console.warn(`‚ö†Ô∏è Dicion√°rio n√£o dispon√≠vel para ${targetLanguage}, retornando texto original`);
      return text;
    }

    // Tradu√ß√£o palavra por palavra (b√°sica)
    const words = text.toLowerCase().split(/\s+/);
    const translatedWords = words.map(word => {
      const cleanWord = word.replace(/[^\w]/g, '');
      return dictionary[cleanWord] || word;
    });

    const result = translatedWords.join(' ');
    console.log(`üìù Tradu√ß√£o dicion√°rio: "${text}" -> "${result}"`);
    
    return result;
  }

  /**
   * Extrai √°udio de um v√≠deo para transcri√ß√£o
   */
  async extractAudioFromVideo(videoPath: string): Promise<string> {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const path = require('path');
    const execAsync = promisify(exec);
    
    // Gerar caminho para o arquivo de √°udio com extens√£o apropriada
    const baseName = path.basename(videoPath, path.extname(videoPath) || '');
    const dirName = path.dirname(videoPath);
    const audioPath = path.join(dirName, `${baseName}_audio.wav`);
    
    try {
      console.log(`üéµ Extraindo √°udio: ${videoPath} -> ${audioPath}`);
      
      // Comando FFmpeg com especifica√ß√µes mais robustas
      const command = `ffmpeg -i "${videoPath}" -vn -acodec pcm_s16le -ac 1 -ar 16000 -f wav -y "${audioPath}"`;
      
      const { stdout, stderr } = await execAsync(command);
      
      console.log(`‚úÖ √Åudio extra√≠do com sucesso: ${audioPath}`);
      if (stderr) {
        console.log('FFmpeg stderr:', stderr);
      }
      
      return audioPath;
      
    } catch (error: any) {
      console.error('‚ùå Erro ao extrair √°udio:', error);
      throw new Error(`Falha na extra√ß√£o de √°udio: ${error.message}`);
    }
  }

  /**
   * Detecta idioma do texto automaticamente
   */
  async detectLanguage(text: string): Promise<string> {
    // Implementa√ß√£o b√°sica de detec√ß√£o de idioma
    const portuguese = /[√†√°√¢√£√ß√©√™√≠√≥√¥√µ√∫]/i;
    const spanish = /[√±√°√©√≠√≥√∫√º]/i;
    const french = /[√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√ß]/i;
    
    if (portuguese.test(text)) return 'pt';
    if (spanish.test(text)) return 'es';
    if (french.test(text)) return 'fr';
    
    return 'en'; // Default para ingl√™s
  }

  /**
   * Obter modelos de tradu√ß√£o dispon√≠veis no Ollama
   */
  async getAvailableModels(): Promise<Array<{id: string, name: string, description: string, available: boolean}>> {
    try {
      // Tentar listar modelos dispon√≠veis no Ollama
      const models = await this.ollama.list();
      
      const availableModels = Object.entries(this.supportedModels).map(([id, config]) => {
        const isAvailable = models.models.some(model => model.name.startsWith(id));
        return {
          id,
          name: config.name,
          description: config.description,
          available: isAvailable
        };
      });

      // Adicionar modelos padr√£o sempre dispon√≠veis
      const defaultModels = [
        {
          id: 'google',
          name: 'Google Translate',
          description: 'Servi√ßo de tradu√ß√£o do Google',
          available: true
        },
        {
          id: 'dictionary',
          name: 'Dictionary Fallback',
          description: 'Sistema de tradu√ß√£o b√°sico usando dicion√°rio local',
          available: true
        }
      ];

      return [...availableModels, ...defaultModels];

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao obter modelos Ollama, retornando modelos padr√£o');
      
      // Retornar apenas modelos n√£o-Ollama se houver erro
      return [
        {
          id: 'google',
          name: 'Google Translate',
          description: 'Servi√ßo de tradu√ß√£o do Google',
          available: true
        },
        {
          id: 'dictionary',
          name: 'Dictionary Fallback',
          description: 'Sistema de tradu√ß√£o b√°sico usando dicion√°rio local',
          available: true
        }
      ];
    }
  }

  /**
   * Obter idiomas suportados para tradu√ß√£o
   */
  getSupportedLanguages(): Array<{code: string, name: string, nativeName: string}> {
    return [
      { code: 'pt', name: 'Portuguese', nativeName: 'Portugu√™s' },
      { code: 'en', name: 'English', nativeName: 'English' },
      { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol' },
      { code: 'fr', name: 'French', nativeName: 'Fran√ßais' },
      { code: 'de', name: 'German', nativeName: 'Deutsch' },
      { code: 'it', name: 'Italian', nativeName: 'Italiano' },
      { code: 'ja', name: 'Japanese', nativeName: 'Êó•Êú¨Ë™û' },
      { code: 'ko', name: 'Korean', nativeName: 'ÌïúÍµ≠Ïñ¥' },
      { code: 'zh', name: 'Chinese', nativeName: '‰∏≠Êñá' },
      { code: 'ru', name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π' },
      { code: 'ar', name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©' },
      { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' }
    ];
  }

  /**
   * Verificar se o Ollama est√° dispon√≠vel
   */
  async isOllamaAvailable(): Promise<boolean> {
    try {
      await this.ollama.list();
      return true;
    } catch (error) {
      return false;
    }
  }
}
